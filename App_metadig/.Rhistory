Fair_table(runSuite(suite, dirXML, input$file$datapath))
})
}
# Run the app ----d
shinyApp(ui = ui, server = server)
library(shiny)
library(xml2)
library(metadig)
library(ggplot2)
library(broman)
library(dplyr)
dirXML = "C:/Users/tangu/Desktop/Stage_meta/Curation/Curation/tests/checks"
suite = "C:/Users/tangu/Desktop/Stage_meta/Curation/Curation/tests/Suite.xml"
# Define UI ----
ui <- fluidPage(
tags$head(includeCSS("www/styles.css")),
tags$head(tags$link(rel = "preconnect", href = "https://fonts.googleapis.com")),
tags$head(tags$link(rel = "preconnect", href = "https://fonts.gstatic.com")),
tags$head(tags$link(rel = "stylesheet", href="https://fonts.googleapis.com/css2?family=Manrope:wght@300&family=Roboto:wght@100&display=swap")) ,
withTags({
div(
class = "header",
checked = NA,
h1(img(width=200,src="https://www.pndb.fr/static/images/PNDB_logo_bandeau.png",class="topleft")),
h2("Assessment Report"),
h3("FAIR score")
)
}),
sidebarLayout(
sidebarPanel(fileInput("file", h3("Select Metadata"))),
mainPanel(textOutput("text"),plotOutput("barchart",width = "60%"), plotOutput("piechart",width = "30%"),tableOutput("table"))
)
)
# Define server logic ----
# Define server logic ----
server <- function(input, output) {
output$text <- renderText({
paste(input$file$datapath)
})
output$barchart <- renderPlot({
try(Fair_scores(runSuite(suite, dirXML, input$file$datapath)), silent=TRUE)
})
output$piechart <- renderPlot({
try(Fair_pie(runSuite(suite, dirXML, input$file$datapath)), silent=TRUE)
})
output$table <- renderPlot({
Fair_table(runSuite(suite, dirXML, input$file$datapath))
})
}
# Run the app ----d
shinyApp(ui = ui, server = server)
library(shiny)
library(xml2)
library(metadig)
library(ggplot2)
library(broman)
library(dplyr)
dirXML = "C:/Users/tangu/Desktop/Stage_meta/Curation/Curation/tests/checks"
suite = "C:/Users/tangu/Desktop/Stage_meta/Curation/Curation/tests/Suite.xml"
# Define UI ----
ui <- fluidPage(
tags$head(includeCSS("www/styles.css")),
tags$head(tags$link(rel = "preconnect", href = "https://fonts.googleapis.com")),
tags$head(tags$link(rel = "preconnect", href = "https://fonts.gstatic.com")),
tags$head(tags$link(rel = "stylesheet", href="https://fonts.googleapis.com/css2?family=Manrope:wght@300&family=Roboto:wght@100&display=swap")) ,
withTags({
div(
class = "header",
checked = NA,
h1(img(width=200,src="https://www.pndb.fr/static/images/PNDB_logo_bandeau.png",class="topleft")),
h2("Assessment Report"),
h3("FAIR score")
)
}),
sidebarLayout(
sidebarPanel(fileInput("file", h3("Select Metadata"))),
mainPanel(textOutput("text"),plotOutput("barchart",width = "60%"), plotOutput("piechart",width = "30%"),tableOutput("table"))
)
)
# Define server logic ----
# Define server logic ----
server <- function(input, output) {
output$text <- renderText({
paste(input$file$datapath)
})
output$barchart <- renderPlot({
try(Fair_scores(runSuite(suite, dirXML, input$file$datapath)), silent=TRUE)
})
output$piechart <- renderPlot({
try(Fair_pie(runSuite(suite, dirXML, input$file$datapath)), silent=TRUE)
})
}
# Run the app ----d
shinyApp(ui = ui, server = server)
library(shiny)
library(xml2)
library(metadig)
library(ggplot2)
library(broman)
library(dplyr)
dirXML = "C:/Users/tangu/Desktop/Stage_meta/Curation/Curation/tests/checks"
suite = "C:/Users/tangu/Desktop/Stage_meta/Curation/Curation/tests/Suite.xml"
# Define UI ----
ui <- fluidPage(
tags$head(includeCSS("www/styles.css")),
tags$head(tags$link(rel = "preconnect", href = "https://fonts.googleapis.com")),
tags$head(tags$link(rel = "preconnect", href = "https://fonts.gstatic.com")),
tags$head(tags$link(rel = "stylesheet", href="https://fonts.googleapis.com/css2?family=Manrope:wght@300&family=Roboto:wght@100&display=swap")) ,
withTags({
div(
class = "header",
checked = NA,
h1(img(width=200,src="https://www.pndb.fr/static/images/PNDB_logo_bandeau.png",class="topleft")),
h2("Assessment Report"),
h3("FAIR score")
)
}),
sidebarLayout(
sidebarPanel(fileInput("file", h3("Select Metadata"))),
mainPanel(textOutput("text"),plotOutput("barchart",width = "60%"), plotOutput("piechart",width = "30%"),tableOutput("table"))
)
)
# Define server logic ----
# Define server logic ----
server <- function(input, output) {
output$text <- renderText({
paste(input$file$name)
})
output$barchart <- renderPlot({
try(Fair_scores(runSuite(suite, dirXML, input$file$datapath)), silent=TRUE)
})
output$piechart <- renderPlot({
try(Fair_pie(runSuite(suite, dirXML, input$file$datapath)), silent=TRUE)
})
}
# Run the app ----d
shinyApp(ui = ui, server = server)
library(shiny)
library(xml2)
library(metadig)
library(ggplot2)
library(broman)
library(dplyr)
dirXML = "C:/Users/tangu/Desktop/Stage_meta/Curation/Curation/tests/checks"
suite = "C:/Users/tangu/Desktop/Stage_meta/Curation/Curation/tests/Suite.xml"
# Define UI ----
ui <- fluidPage(
tags$head(includeCSS("www/styles.css")),
tags$head(tags$link(rel = "preconnect", href = "https://fonts.googleapis.com")),
tags$head(tags$link(rel = "preconnect", href = "https://fonts.gstatic.com")),
tags$head(tags$link(rel = "stylesheet", href="https://fonts.googleapis.com/css2?family=Manrope:wght@300&family=Roboto:wght@100&display=swap")) ,
withTags({
div(
class = "header",
checked = NA,
h1(img(width=200,src="https://www.pndb.fr/static/images/PNDB_logo_bandeau.png",class="topleft")),
h2("Assessment Report"),
h3("FAIR score")
)
}),
sidebarLayout(
sidebarPanel(fileInput("file", h3("Select Metadata"))),
mainPanel(textOutput("text"),plotOutput("barchart",width = "60%"), plotOutput("piechart",width = "30%"),tableOutput("table"))
)
)
# Define server logic ----
# Define server logic ----
server <- function(input, output) {
output$barchart <- renderPlot({
try(Fair_scores(runSuite(suite, dirXML, input$file$datapath)), silent=TRUE)
})
output$piechart <- renderPlot({
try(Fair_pie(runSuite(suite, dirXML, input$file$datapath)), silent=TRUE)
})
output$table <- renderPlot({
Fair_table(runSuite(suite, dirXML, input$file$datapath))
})
}
# Run the app ----d
shinyApp(ui = ui, server = server)
suite = "C:/Users/tangu/Desktop/Stage_meta/Curation/Curation/tests/Suite.xml"
# Define server logic ----
# Define server logic ----
server <- function(input, output) {
output$barchart <- renderPlot({
try(Fair_scores(runSuite(suite, dirXML, input$file$datapath)), silent=TRUE)
})
output$piechart <- renderPlot({
try(Fair_pie(runSuite(suite, dirXML, input$file$datapath)), silent=TRUE)
})
output$table <- renderPlot({
Fair_table(runSuite(suite, dirXML, input$file$datapath))
})
}
shinyApp(ui = ui, server = server)
View(runSuite)
# Define server logic ----
# Define server logic ----
server <- function(input, output) {
output$barchart <- renderPlot({
try(Fair_scores(runSuite(suite, dirXML, input$file$datapath)), silent=TRUE)
})
output$piechart <- renderPlot({
try(Fair_pie(runSuite(suite, dirXML, input$file$datapath)), silent=TRUE)
})
output$table <- renderPlot({
Fair_table(runSuite(suite, dirXML, paste0("C:/Users/tangu/Desktop/Stage_meta/Curation/Curation/tests/",input$file$name)))
})
}
library(shiny)
library(xml2)
library(metadig)
library(ggplot2)
library(broman)
library(dplyr)
dirXML = "C:/Users/tangu/Desktop/Stage_meta/Curation/Curation/tests/checks"
suite = "C:/Users/tangu/Desktop/Stage_meta/Curation/Curation/tests/Suite.xml"
# Define UI ----
ui <- fluidPage(
tags$head(includeCSS("www/styles.css")),
tags$head(tags$link(rel = "preconnect", href = "https://fonts.googleapis.com")),
tags$head(tags$link(rel = "preconnect", href = "https://fonts.gstatic.com")),
tags$head(tags$link(rel = "stylesheet", href="https://fonts.googleapis.com/css2?family=Manrope:wght@300&family=Roboto:wght@100&display=swap")) ,
withTags({
div(
class = "header",
checked = NA,
h1(img(width=200,src="https://www.pndb.fr/static/images/PNDB_logo_bandeau.png",class="topleft")),
h2("Assessment Report"),
h3("FAIR score")
)
}),
sidebarLayout(
sidebarPanel(fileInput("file", h3("Select Metadata"))),
mainPanel(textOutput("text"),plotOutput("barchart",width = "60%"), plotOutput("piechart",width = "30%"),tableOutput("table"))
)
)
# Define server logic ----
# Define server logic ----
server <- function(input, output) {
output$barchart <- renderPlot({
try(Fair_scores(runSuite(suite, dirXML, input$file$datapath)), silent=TRUE)
})
output$piechart <- renderPlot({
try(Fair_pie(runSuite(suite, dirXML, input$file$datapath)), silent=TRUE)
})
output$table <- renderPlot({
Fair_table(runSuite(suite, dirXML, paste0("C:/Users/tangu/Desktop/Stage_meta/Curation/Curation/tests/",input$file$name)))
})
}
# Run the app ----d
shinyApp(ui = ui, server = server)
# Define server logic ----
# Define server logic ----
server <- function(input, output) {
output$barchart <- renderPlot({
try(Fair_scores(runSuite(suite, dirXML, input$file$datapath)), silent=TRUE)
})
output$piechart <- renderPlot({
try(Fair_pie(runSuite(suite, dirXML, input$file$datapath)), silent=TRUE)
})
output$table <- renderPlot({
Fair_table(runSuite(suite, dirXML, input$file$datapath))
})
}
shinyApp(ui = ui, server = server)
Fair_table(Res3)
a=Fair_table(Res3)
View(a)
class(a)
# Define server logic ----
# Define server logic ----
server <- function(input, output) {
output$barchart <- renderPlot({
try(Fair_scores(runSuite(suite, dirXML, input$file$datapath)), silent=TRUE)
})
output$piechart <- renderPlot({
try(Fair_pie(runSuite(suite, dirXML, input$file$datapath)), silent=TRUE)
})
print('o')
output$table <- renderPlot({
Fair_table(runSuite(suite, dirXML, input$file$datapath))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(xml2)
library(metadig)
library(ggplot2)
library(broman)
library(dplyr)
dirXML = "C:/Users/tangu/Desktop/Stage_meta/Curation/Curation/tests/checks"
suite = "C:/Users/tangu/Desktop/Stage_meta/Curation/Curation/tests/Suite.xml"
# Define UI ----
ui <- fluidPage(
tags$head(includeCSS("www/styles.css")),
tags$head(tags$link(rel = "preconnect", href = "https://fonts.googleapis.com")),
tags$head(tags$link(rel = "preconnect", href = "https://fonts.gstatic.com")),
tags$head(tags$link(rel = "stylesheet", href="https://fonts.googleapis.com/css2?family=Manrope:wght@300&family=Roboto:wght@100&display=swap")) ,
withTags({
div(
class = "header",
checked = NA,
h1(img(width=200,src="https://www.pndb.fr/static/images/PNDB_logo_bandeau.png",class="topleft")),
h2("Assessment Report"),
h3("FAIR score")
)
}),
sidebarLayout(
sidebarPanel(fileInput("file", h3("Select Metadata"))),
mainPanel(textOutput("text"),plotOutput("barchart",width = "60%"), plotOutput("piechart",width = "30%"),tableOutput("table"))
)
)
# Define server logic ----
# Define server logic ----
server <- function(input, output) {
output$barchart <- renderPlot({
try(Fair_scores(runSuite(suite, dirXML, input$file$datapath)), silent=TRUE)
})
output$piechart <- renderPlot({
try(Fair_pie(runSuite(suite, dirXML, input$file$datapath)), silent=TRUE)
})
print('o')
output$table <- renderTable({
Fair_table(runSuite(suite, dirXML, input$file$datapath))
})
}
# Run the app ----d
shinyApp(ui = ui, server = server)
library(shiny)
library(xml2)
library(metadig)
library(ggplot2)
library(broman)
library(dplyr)
dirXML = "C:/Users/tangu/Desktop/Stage_meta/Curation/Curation/tests/checks"
suite = "C:/Users/tangu/Desktop/Stage_meta/Curation/Curation/tests/Suite.xml"
# Define UI ----
ui <- fluidPage(
tags$head(includeCSS("www/styles.css")),
tags$head(tags$link(rel = "preconnect", href = "https://fonts.googleapis.com")),
tags$head(tags$link(rel = "preconnect", href = "https://fonts.gstatic.com")),
tags$head(tags$link(rel = "stylesheet", href="https://fonts.googleapis.com/css2?family=Manrope:wght@300&family=Roboto:wght@100&display=swap")) ,
withTags({
div(
class = "header",
checked = NA,
h1(img(width=200,src="https://www.pndb.fr/static/images/PNDB_logo_bandeau.png",class="topleft")),
h2("Assessment Report"),
h3("FAIR score")
)
}),
sidebarLayout(
sidebarPanel(fileInput("file", h3("Select Metadata"))),
mainPanel(textOutput("text"),plotOutput("barchart",width = "60%"), plotOutput("piechart",width = "30%"),tableOutput("table"))
)
)
# Define server logic ----
# Define server logic ----
server <- function(input, output) {
output$barchart <- renderPlot({
try(Fair_scores(runSuite(suite, dirXML, input$file$datapath)), silent=TRUE)
})
output$piechart <- renderPlot({
try(Fair_pie(runSuite(suite, dirXML, input$file$datapath)), silent=TRUE)
})
print('o')
output$table <- renderTable({
Fair_table(runSuite(suite, dirXML, input$file$datapath))
})
}
# Run the app ----d
shinyApp(ui = ui, server = server)
library(shiny)
library(xml2)
library(metadig)
library(ggplot2)
library(broman)
library(dplyr)
dirXML = "C:/Users/tangu/Desktop/Stage_meta/Curation/Curation/tests/checks"
suite = "C:/Users/tangu/Desktop/Stage_meta/Curation/Curation/tests/Suite.xml"
# Define UI ----
ui <- fluidPage(
tags$head(includeCSS("www/styles.css")),
tags$head(tags$link(rel = "preconnect", href = "https://fonts.googleapis.com")),
tags$head(tags$link(rel = "preconnect", href = "https://fonts.gstatic.com")),
tags$head(tags$link(rel = "stylesheet", href="https://fonts.googleapis.com/css2?family=Manrope:wght@300&family=Roboto:wght@100&display=swap")) ,
withTags({
div(
class = "header",
checked = NA,
h1(img(width=200,src="https://www.pndb.fr/static/images/PNDB_logo_bandeau.png",class="topleft")),
h2("Assessment Report"),
h3("FAIR score")
)
}),
sidebarLayout(
sidebarPanel(fileInput("file", h3("Select Metadata"))),
mainPanel(textOutput("text"),plotOutput("barchart",width = "60%"), plotOutput("piechart",width = "30%"),tableOutput("table"))
)
)
# Define server logic ----
# Define server logic ----
server <- function(input, output) {
output$barchart <- renderPlot({
try(Fair_scores(runSuite(suite, dirXML, input$file$datapath)), silent=TRUE)
})
output$piechart <- renderPlot({
try(Fair_pie(runSuite(suite, dirXML, input$file$datapath)), silent=TRUE)
})
output$table <- renderTable({
try(Fair_table(runSuite(suite, dirXML, input$file$datapath)), silent=TRUE)
})
}
# Run the app ----d
shinyApp(ui = ui, server = server)
library(shiny)
library(xml2)
library(metadig)
library(ggplot2)
library(broman)
library(dplyr)
dirXML = "C:/Users/tangu/Desktop/Stage_meta/Curation/Curation/tests/checks"
suite = "C:/Users/tangu/Desktop/Stage_meta/Curation/Curation/tests/Suite.xml"
# Define UI ----
ui <- fluidPage(
tags$head(includeCSS("www/styles.css")),
tags$head(tags$link(rel = "preconnect", href = "https://fonts.googleapis.com")),
tags$head(tags$link(rel = "preconnect", href = "https://fonts.gstatic.com")),
tags$head(tags$link(rel = "stylesheet", href="https://fonts.googleapis.com/css2?family=Manrope:wght@300&family=Roboto:wght@100&display=swap")) ,
withTags({
div(
class = "header",
checked = NA,
h1(img(width=200,src="https://www.pndb.fr/static/images/PNDB_logo_bandeau.png",class="topleft")),
h2("Assessment Report"),
h3("FAIR score")
)
}),
sidebarLayout(
sidebarPanel(fileInput("file", h3("Select Metadata"))),
mainPanel(textOutput("text"),plotOutput("barchart",width = "60%"), plotOutput("piechart",width = "30%"),tableOutput("table"))
)
)
# Define server logic ----
# Define server logic ----
server <- function(input, output) {
output$barchart <- renderPlot({
try(Fair_scores(runSuite(suite, dirXML, input$file$datapath)), silent=TRUE)
})
output$piechart <- renderPlot({
try(Fair_pie(runSuite(suite, dirXML, input$file$datapath)), silent=TRUE)
})
output$table <- renderTable({
if (is.character(input$file$datapath)){
Fair_table(runSuite(suite, dirXML, input$file$datapath))
}
})
}
# Run the app ----d
shinyApp(ui = ui, server = server)
setwd("C:/Users/tangu/Desktop/App")
setwd("C:/Users/tangu/Desktop/App")
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(httr)
library(jsonlite)
# Define UI for application that draws a histogram
# Define server logic required to draw a histogram
server <- function(input, output) {
res <- GET('http://www.mapquestapi.com/traffic/v2/incidents?key=a1xe79AH6LIsAwUWaTRwx8D46LAyO7lR&boundingBox=39.95,-105.25,39.52,-104.71')
data <- fromJSON(rawToChar(res$content))
df <- data.frame(data$incidents)
# print(df)
output$dataTable <- renderTable({
return(df[c(1: 15)])
})
}
# Run the application
shinyApp(ui = htmlTemplate("www/index.html"), server = server)
setwd("C:/Users/tangu/Desktop/App")
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(httr)
library(jsonlite)
# Define UI for application that draws a histogram
# Define server logic required to draw a histogram
server <- function(input, output) {
res <- GET('http://www.mapquestapi.com/traffic/v2/incidents?key=a1xe79AH6LIsAwUWaTRwx8D46LAyO7lR&boundingBox=39.95,-105.25,39.52,-104.71')
data <- fromJSON(rawToChar(res$content))
df <- data.frame(data$incidents)
# print(df)
output$dataTable <- renderTable({
return(df[c(1: 15)])
})
}
# Run the application
shinyApp(ui = htmlTemplate("www/index.html"), server = server)
